# 주석 (comment)
"""
프로그램 실행에는 영향을 주지 않으면서 사람만 알아볼 수 있도록 작성
코드에 대한 자세한 설명을 작성하거나, 특정코드를 임시로 사용하지 않도록 만들 때 쓴다

# --> 코드 맨 앞에 붙임. 해당 줄은 모두 주석 처리

"""


# print 함수 : 출력(화면에)
'''
print(1, 2, 3)
print('python!!')

print(1, 2, 3, sep=',') # sep에 콤마(,) 지정
print(4, 5, 6, sep=':') # sep에 콜론(:) 지정
print(1, 2, 3, sep='\n') # sep에 개행문자 (엔터) 지정

print(7, end='')  # 끝에 엔터를 없애줌
print(8, end=' ') # 끝에 엔터를 없애고 공백을 삽입
print(9)

'''

# 변수
'''
a = 10
print(a)

'''

# 변수에 사용할 수 있는 문자
'''
영어 소문자, 영어 대문자(대소문자 구분)
한글 등 각 나라의 문자
숫자(숫자가 맨 앞에 올 수는 없다)
언더바 (_)

'''

# 변수에 사용할 수 없는 경우
'''
특수문자(+, -, *, /, %, &, $ 등), 예약어(파이썬의 문법적인 용어)

'''

# 예약어(키워드) 확인하는 방법
'''
예약어 : 특별한 의미가 부여된 단어. 파이썬에서 이미 특정의미로 사용하기로 약속해놓은 것.
프로그래밍 언어에서 이름 정할 때 똑같이 사용할 수 없음
대소문자 구분

import keyword
print(keyword.kwlist)

'''

# 여러개의 변수
'''
a = 1
b = 2
c = 3

a, b, c = 1, 2, 3 # 변수에 값을 대입할 때 한번에 순서대로 대입(짝이 맞아야 함)
print(a, b, c)

a = 4
b = 4
c = 4

a = b = c = 4  # 여러개의 변수에 한 번에 같은 값을 대입하는 것도 가능
print(a, b, c)

'''

# 변수의 교환 : 다른 언어와 다르게 변수 교환이 쉽다(임시 변수가 필요 없음)
'''
a = 1
b = 2

print(a, b)

a, b = b, a

print(a, b)


'''

# 변수의 삭제 : del 함수 이용
'''
a = 3
print(a)
del(a)
print(a)

'''

# 원의 둘레와 넓이 구하기
'''
r = 10        # 반지름
pi = 3.14159  # 원주율(파이)

print('반지름 : ', r)
print('원주율 : ', pi)

print('원의 둘레 : ', r * 2 * pi) # 둘레 공식 = 반지름 * 2 * 원주율
print('원의 넓이 : ', r * r * pi) # 넓이 공식 = 반지름 * 반지름 * 원주율

'''

# 자료형 (Type)
'''
프로그래밍을 할 때 쓰이는 숫자, 문자열 등 자료 형태로 사용하는 모든 것
다른 언어의 경우는 변수 설정 시 애초에 타입을 설정하는 경우가 많음
파이썬의 경우는 값을 할당하면 그 때 타입이 설정되기 때문에 초보자가 배우기가 쉽다



print(type('안녕하세요'))
print(type(123))

print(4 + 7.11)     # 실수형 답 : 11.11
print(int(4 + 7.11)) # 결과가 정수형 답 : 11
print(str(4 + 7.11)) # 결과가 문자열 딥 : 11.11
print(type(str(4 + 7.11))) # 문자열인지 확인하려고 type 함수 이용

'''

# 문자열 자료형
'''
문자열 (string) : 문자, 단어 등으로 구성된 문자들의 집합


print('Hello, python!!')

print("""Life is too short,
You need python.""")  # 여러 줄

print("It's me.")
print('"Python is very easy." he says.')


[출력결과]
Hello, python!!
Life is too short,
You need python.
It's me.
"Python is very easy." he says.

'''

# 이스케이프 코드
'''
프로그래밍 할 때 사용할 수 있도록 미리 정의해둔 '문자 조합'
출력물을 보기 좋게 정렬하는 용도로 사용

\n : 줄을 바꿀 때 사용(엔터)
\t : 문자열 사이에 탭 간격을 줄 때 사용
\' : 작은 따옴표(')를 그대로 표현할 때 사용
\" : 큰 따옴표(")를 그대로 표현할 때 사용
\\ : 역슬래시(\)를 그대로 표현할 때 사용

ex)
print('It\'s me.')
print('이름\t나이\t지역')
print('라이언\t20\t대구')
print('어피치\t30\t서울')
print('무지\t40\t부산')


'''

# 문자열 연산
'''
문자열의 덧셈(+) 두 문자열을 연결
문자열의 곱셈(*) 문자열을 곱한 수 만큼 반복 출력



a = '문자열'
b = '연산'
c = '안녕'
d = '하세요'
print(a + b) # 꼭! 문자와 문자끼리만 더하기 할 것. 숫자와 더하기 하면 에러남
print(c + d)

print(c * 5)
print(b * 10)

'''

# 문자열 인덱싱 (indexing)
'''
문자열(string)에서 문자(character)의 순서를 숫자로 나타낸 것

[0] : 문자의 처음
[-1] : 문자의 마지막

p   y  t  h  o  n
0   1  2  3  4  5
-6 -5 -4 -3 -2 -1


ex)
a = 'My python'
print(a[0])
print(a[-1])
print(a[3])
print(a[2])  # 빈 칸도 포함

print('안녕하세요'[0])
print('안녕하세요'[1])
print('안녕하세요'[2])
print('안녕하세요'[3])
print('안녕하세요'[4])
print()
print('안녕하세요'[-1])
print('안녕하세요'[-2])
print('안녕하세요'[-3])
print('안녕하세요'[-4])
print('안녕하세요'[-5])


'''

# 문자열 슬라이싱 (slicing)
'''
문자열의 구간을 표시
예를 들어 a라는 변수가 있다면
a[시작번호:끝번호-1]

[:] --> 처음부터 끝까지. 전부를 의미



a = 'python'
print(a[0:2])
print(a[:])
print(a[-2:-1])
print(a[:3]) # 처음부터(시작번호 생략)
print(a[3:]) # 끝까지 출력(끝번호 생략)

print()

print('안녕하세요'[1:])
print('안녕하세요'[:3])
print('안녕하세요'[2:4])


b = 'hello'
print(b[1])
print(b[:2])
print(b)  # 원본에는 영향을 주지 않는다.


'''








