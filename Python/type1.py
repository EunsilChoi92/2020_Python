#data type : 자료형
#어떠한 값(자료)의 형태

'''
[1. 숫자형(Number)]
    정수     : -1234,0,1234
    실수(소수): 1.1,3.14,-123.331
    2진수(binary) : 0b10,0B10
    8진수(octal)  : 0o10,0O10
    16진수(hex)   : 0x10,0X10

    사칙연산 : + - * /
    나머지 연산 : %
    몫연산 : //
    제곱연산 : **
    
'''
print("=====================")
print("1.숫자형")
print("=====================")

print("기본숫자형")
print("정수 :",-1,0,10)
print("실수 :",-1.11,10.12)
#print() 함수는 숫자를 10진수로 출력
print("2진수 :",0b100,0B100)
print("8진수 :",0o100,0O100)
print("16진수 :",0x10,0X10)

print()

print("[숫자 연산하기]")
#연산자 : 연산(계산)을 수행하는 '기호'
#피연산자 : 연산자의 작업 대상
# 연산을 수행한다 -> 피연산자를 이용해서 하나의 값을 만듬

num1 = 10
num2 = 3

print("[num1 =",num1,", num2 =",num2,"]",sep='')
print("num1 + num2 =",(num1+num2))
#연산을 수행할 때 만들어질 하나의 값은 소괄호(())로 묶은다.
#>필수는 아니나 좋은 습관
print("num1 - num2 =",(num1-num2))
print("num1 * num2 =",(num1*num2))
print("num1 / num2 =",(num1/num2))
print("num1 // num2 =",(num1//num2))
print("num1 ** num2 =",(num1**num2))
print("num1 % num2 =",(num1%num2))

'''
    나머지 연산 %
        - 두 수를 나누고, 나머지 값만 사용
        - 12를 3으로면 나머지가 0이면 3의 배수이다
        - 어떤 수 2로 나눈 나머지가 0이면 짝수 1이면 홀수     
'''
print()

'''
[2.문자형(String)]
    "abc"
    '123'
        -->따옴표로 둘러쌓이면 문자열

    문자열을 만드는 방법
    1.큰따옴표 1개
    2.작은따옴표 1개
    3.큰따옴표 3개
    4.작은딱옴표 3개

    이스케이프 문자
        -문자열 안에서 특수한 기능을 가지는 문자
        -역슬래시(\)로 시작한다

            \n : 개행(줄바꿈) new Line
            \t : tab키를 누른 만큼 들여쓰기
            \\ : \ 출력
            \" : " 출력
            \' " ' 출력
            
        
    
'''

print("=====================")
print("2.문자형")
print("=====================")
print("[문자열 만드는 4가지 방법]")
print('1.happy day')
print("2.happy day")
print('''3.happy day''')
print("""4.happy day""")

print('김철수 : "파이썬 재밌다"')#문자열에 큰 따옴표 포함
print("김철수 : '파이썬 재밌다'")
print("김철수 : \"파이썬 재밌다\"")

#여러줄의 문자열 다루기 ->3개짜리 사용
print("""안녕하세요
파이썬입니다.""")

hello = """안녕하세요
파이썬입니다."""

print(hello)
print("안녕하세요\n파이썬입니다.")

'''
    문자열 연산하기
        1. + : 연결
        2. * : 반복
'''
print("[문자열 연산하기]")
#+
print("안녕"+"하세요")

str1 = "안녕"
str2 = "하세요"

print(str1+str2)

#*
print("안녕"*3)
#곱셈도 연산 -> 하나의 값 만듬

str3 = "곱셈"*5
print(str3)

#문자열 곱셈 응용
print("="*10)
print("깔끔")
print("="*10)

'''
    1. 문자열 출력 연습
        - 출력결과를 아래 2가지 방법으로 출력하기 (출력결과가 2번 출력돼야함)
            (1) 작은따옴표 3개 - 이스케이프 문자 사용 X
            (2) 큰따옴표 1개  - 이스케이프 문자 사용 O

[출력결과]
철수 "안녕? 파이썬 재밌지?"
영희 "응, 너무 재밌어!"
'''
print('''철수 "안녕?파이썬 재밌지?"
영희 "응, 너무 재밌어!"''')

print("철수 \"안녕? 파이썬 재밌지?\"\n영희 \"응, 너무 재밌어!\"")

'''
    2. 문자열 연산 연습
        - print() 3번만 사용
        - 연산 : 덧셈, 곱셈
            곱셈 : * , 공백 ' '*5, 파이썬최고
            hint : 연산=하나의 값을 만듦 ==> ( ) 소괄호로 묶는다.

[출력결과]
********************       별 20개
     파이썬최고             파이썬최고 앞에 빈칸 5개
     파이썬최고             파이썬최고 앞에 빈칸 5개
     파이썬최고             파이썬최고 앞에 빈칸 5개
********************       별 20개
'''
print("*"*20,end='')
print(("\n"+(" "*5) + ("파이썬최고"))*3)
print("*"*20)

'''
문자열 인덱싱
    -인덱싱(indexing) : index 색인, 무언가를 가리킨다.
    -문자열에서 특정 글자를 뽑아내어 사용하는 것
        >특정 글자를 찾을 때 '순서'를 사용 -> 인덱스
        >순서는 0부터 시작
        >>인덱스라는 표현(용어)이 들어가면 무조건 0부터
        >>컴퓨터는 숫자를 0부터 센다
        >음수는 뒤에서부터 순서를 센다.        
'''
print("[문자열 인덱싱]")
my_str = "Without haste, but without rest." #32글자
print(my_str)
#문자열에서 특정 순서의 글자를 뽑을 때 [] 사용
print(my_str[0])
print(my_str[0],my_str[1],my_str[10])
print(my_str[-1])

#print(my_str[32])#오류! 33번째 글자라는 의미
#print(my_str[-33])
print()

'''
문자열 슬라이싱
    -슬라이싱(Slicing) : 조각낸다.
        >인덱스로 특정 범위의 문자를 조각내서 사용

        a[0:3] ->콜론(:)으로 범위 지정

        a[시작인덱스:끝인덱스] ->끝 인덱스는 포함 X
            시작인덱스 <= a < 끝인덱스
        a[시작인덱스:] -> '시작인덱스' 부터 '끝'까지
        a[:끝인덱스] ->'처음'부터 '끝인덱스' (끝은 포함 X)
        a[:] -> 시작부터 끝 -> 전체 -> a
             
'''
print("[문자열 슬라이싱]")
my_str = "Without haste, but without rest." #32글자
print(my_str[0]+my_str[1]+my_str[2]+my_str[3])
print(my_str[0:4])#끝 인덱스는 포함되지 않는다.
print(my_str[8:13])#시작인덱스가 0일 필요는 없다.

print(my_str[0:100])#슬라이싱은 인덱스 범위를 초과해도 오류 X
print(my_str[8:])
print(my_str[:-7])#처음부터 '뒤에서 7번째까지'
print(my_str[:-200])

#my_str의 문자 중 첫 글자를 소문자 w로 바꾸고 싶다면
#my_str[0] = 'w' #오류 -->이미 만들어진 문자열은 수정 불가!
#슬라이싱을 이용해서 '새로운 문자열' 생성
new_str = 'w'+my_str[1:]
print(new_str)

#중요 ->문자열 변경 불가능 -> 새로 만들어야 한다.
#하나의 자료(문자열,리스트 등등)가 여러개의 값으로 이루어진 경우 사용 가능
#문자열  = 문자 하나하나가 나열된 자료

'''
    3. 문자열 슬라이싱 연습
        - phone_number 에서 숫자만 가져와서 새로운 변수에 저장
'''

phone_number = "010-8383-9133"
# only_number 변수 만들기

only_number = phone_number[0:3]+phone_number[4:8]+phone_number[9:]
print(only_number) #--> 01083839133

'''
    4. 문자열 슬라이싱 연습
        - info 에서 이름과 성별을 각각 변수에 저장
'''

info = "한수창 - 남자"
# name 만들기
# gender 만들기
name = info[0:3]
gender = info[6:]

print(name)   #--> 한수창
print(gender) #--> 남자


'''
문자열 기본 포매팅
    -문자열 안에 '값'을 '삽입'하는 방법

    -포맷코드(서식 문자)
        %s : 문자열(String)
        %c : 문자 1개
        %d : 정수
        %f : 실수
        %% : %하나 삽입
'''
print("[문자열 기본 포매팅]")
print("정수 %d입니다." %10)
my_str = "정수 : %d"%20
print(my_str)
#C언의 printf와 비슷
#차이점 : 파이썬은 '문자열'에 값을 삽입해서 새로운 문자열 생성
#문자열 뒤에 바로 % 기호를 붙여서 값을 입력

print("실수 : %f"%10.1)
print("문자열 : %s"%"나는 문자열")
#포맷코드의 사용은 뒤따라오는 값을 어떤 형태로 삽입할 것인지 결정
print("정수 : %d"%10.12345)#실수 값을 정수로 삽입(소수점 이하 소멸)
print("실수 : %f"%30)#정수값을 실수로 삽입(없던 소수점 생성)

#print("정수 : %d"%"1")#오류 문자열을 숫자형태(%d,%f) 삽입 불가
print("문자열 : %s"%10)
print("문자열 : %s"%10.12345)
#숫자를 문자형태로 삽입 가능. %s 다 글자취급함

year = 2019
print("변수 사용 : %d"%year)
print("변수 사용 : %s"%year)

#하나의 문자열을 만들 때 값이 들어갈 위치를 미리 지정해놓고 포맷코드 사용

print("%d년 입니다."%year)
year = year + 1
#year += 1#복합대입 연산자
'''
+= , -= ,*= 대입연산자(=)와 다른 연산기호가 합쳐진 형태
year += 1 -> year = year + 1
year *= 1 -> year = year * 1
나 자기자신의 값을 이용해서 연산 후, 나한테 다시 대입
주의사항 : 복합대입 연산자 사용시 사용할 변수는 만들어져  있어야 한다
'''
print("%d년 입니다."%year)
print ("올해는",year,"입니다")

print("%d개 이상의 %s 넣기"%(2,"값"))
#% 뒤의 값들을 소괄호로 묶어준다. 순서대로 값이 포맷코드에 삽입
print("오늘의 행복지수 100%")
print("오늘의 행복지수 %d%%"%100)
#문자열 포매팅을 사용하지 않으면
#%기호는 일반 문자처럼 사용되지만
#포매팅을 사용하면 %하나를 사용하고 싶을 때, %% 두번 써야 한다.
print()

print("[포맷코드를 활용한 소수점 표현]")
print("소수 : %f"%10.1)#기본 소수점 6자리까지 표현
print("소스 : %f"%10.6666666666)#자동 반올림
print("소스점 자리지(3) : %.3f"%10.6666666666)
print()
print("[포맷코드를 활용한 정렬과 공백]")
print("[%s] [%s]"%("파이썬","재밌다"))
print("[%20s] [%20s]"%("파이썬","재밌다"))
#삽입 시 20칸 확보 후 값을 대입
print("[%-20s] [%-20s]"%("파이썬","재밌다"))

print("[문자열 포매팅 함수]")
#문자열.format()
my_str = "제 이름은 {} 입니다.".format("한수창")
print(my_str)
print("제 나이는 {}살입니다.".format(20))
#1.포맷코드 대신 {} 중괄호를 사용한다.
#2.하나의 문자열을 만드는 과정
#프로그래밍 언어에서.... ~~~~.함수()형태가 많다
#format() 함수는 '문자열'로 사용할 수 있는 '문자열의 함수'

print("1.제 이름은 {}이고, {}살입니다.".format("한수창",20))
#기본은 순서대로
print("2.제 이름은 {1}이고, {0}살입니다.".format("한수창",20))
#{}안에 인덱스 사용

name = "한수창"
age = 20
print("3.제 이름은 {}이고, {}살입니다.".format(name,age))
#키워드 사용(마치 키워드가 변수처럼 됨. 변수에 값을 대입하듯이 사용)
print("4.제 이름은 {name}이고, {age}살입니다.".format(name="한수창",age=20))
print("5.제 이름은 {name}이고, {age}살입니다.".format(age=20,name="한수창"))
#순서 상관 없음
print("6.제 이름은 {name}이고, {age}살입니다.".format(age=age,name=name))
#name=name에서 앞의 name은 format()함수의 키워드, 뒤에 name은 변수

#키워드와 인덱스 혼용 시 키워드는 맨 뒤에 위치
print("7.제 {}은 {name}이고, {}살입니다.".format("이름",20,name=name))

#format()안의 값은 인덱스한테 먼저 우선권
#print("7.제 {}은 {name}이고, {}살입니다.".format(name=name,"이름",20))

print("제 이름은 "+"한수창"+"이고, "+"20"+"살 입니다.") #(1) 포매팅 X
print("제 이름은 %s이고, %s살 입니다."%("한수창",20))#(2) 기본 포매팅
print("제 이름은 {}이고, {}살 입니다.".format("한수창",20))#(3) 포매팅 함수
print()

#소수점 표현
print("소수 : {}".format(10.123))
print("소수 : {}".format(1.2142452123141249812641928461))#14자리까지

print("소수점 3자리 : {:.3f}".format(10.777777))
print("소수점 3자리 : {0:.3f}".format(10.777777))

#format() 함수 사용 시 중괄호{}에 특수한 기능을 추가하는 기호 -> 콜론
#콜론을 사용할 때는 인덱스 뒤에 위치(인덱스 생략 가능)

#정렬
print("[{}][{}]".format("파이썬","재밌다"))
print("[{:10}][{:10}]".format("파이썬","재밌다"))#10칸 확보,기본 좌측정렬
print("[{:<10}][{:<10}]".format("파이썬","재밌다"))#좌측정렬 <(기본값)
print("[{:>10}][{:>10}]".format("파이썬","재밌다"))#우측정렬 >
print("[{:^10}][{:^10}]".format("파이썬","재밌다"))#가운데 정렬 ^

#정렬 후 빈 공간에 값 채우기
print("[{:하^10}][{:하^10}]".format("파이썬","재밌다"))
print("[{: ^10}][{: ^10}]".format("파이썬","재밌다"))#원래 공백이 기본

#이처럼 기본으로 적용되는 값들이 많이 있다.
#1)print() 함수의 sep=' ' , end ='\n'
#2){} : 인덱스가 0부터 시작(기본값)
#3)<  : 생략해도 기본이 좌측정렬
#4)공백: 생략해도 빈 공간이 공백으로 채워진다.

print()

'''
    5. 문자열 포매팅 연습
        - 아래 3개의 변수를 미리 만들어 놓고, 포매팅을 사용하여 출력
            name  = "한수창"
            age   = "20"
            phone = "010-8383-9133"
        
        (1) 포매팅 -> .format 사용 X
        (2) 포매팅 -> .format 사용 O
        (3) 포매팅 사용하지 않고 출력 -> 아마도 제일 복잡한..^^;
        
[출력결과]
이름 : 한수창
나이 : 20
전화 : 010-8383-9133

'''
name  = "한수창"
age   = "20"
phone = "010-8383-9133"

print("이름 : %s\n나이 : %s\n번호 : %s\n"%(name,age,phone))
print("이름 : {}\n나이 : {}\n번호 : {}\n".format(name,age,phone))
print("이름 :",name,"\n나이 :",age,"\n번호 :",phone)




'''

    6. 문자열 포매팅 연습
        - 문자열.format() 을 이용하여 20칸 크기 확보 후 가운데 정렬! (방식 자유)
        - 문자열 곱셈 연산은 사용하지 않기

[출력결과]
====================
       String
====================


'''

print("{:=^20}\n{:^20}\n{:=^20}".format("","String",""))


print("[문자열 관련 함수]")
#"".format() 처럼 문자열을 이용해서 사용할 수 있는 유용한 함수
# > XX관련 함수 : xx.함수() 문법 규칙임

#upper():문자열의 영문을 모든 대문자로 변환하여 새로운 문자열을 만든다.
#lower():소문자로

str1 = "I'm a Boy"
print(str1.upper())
print(str1)

str2 = str1.upper()
print(str2)

#xx관련 함수를 사용했을떄
# 1) 기존 값을 이용해서 새로운 결과를 만들어낸다.
# 2) 기존 값 자체가 변환다.

new_str = str2.lower()
print(new_str)

#새로운 문자열을 만들었다
# 1)만들어진 문자열을 어딘가에 바로 사용(우리는 print() 로 출력하는데 사용)
# 2)변수에 대입

print("abcdef".upper())

#title() : 문자열에 존재하는 '영단어'의 첫 글자를 대문자로(제목처럼)

str2 = "python python"
print(str2.title())
print(str2)

#strip() : 문자열 좌우측에 존재하는 '공백' 제거

str3 = "           공 백 제 거            "
print("strip 사용->"+str3.strip())
#중간에 있는 공백은 제거 X -> 공백이 아닌 문자를 만날때까지만 공백 제거
print("    공백제거 합시다.".strip())
print("lstrip 사용 ->"+str3.lstrip())#left : 좌측 공백만 제거
print("rstrip 사용 ->"+str3.rstrip())#right : 우측 공백만 제거


#join() : 특정 문자열을 대상 문자열에 삽입
#"A".join("BBB") -> "BABAB"

a = ","
print(a.join("문자열 삽입 join()"))
print(",".join("JOIN"))
#join 해서 새로운 문자열 삽입

#count("A") : 문자열에서 "A"의 개수를 반환(함수의 결과 값이 A의 개수)
str3 = "python python python"
print("str3에서 p의 개수 :",str3.count("p"))
#print("str3에서 p의 개수 :"+str3.count("p"))#오류! 문자+숫자 = 오류

print("str3에서 x의 개수 :",str3.count("x")) #없으면 0
print()

#replace("A","B") : 문자열에서 모든 "A"를 찾아서 "B"로 변경
str3 = "replace : python python python"
#변경하고 싶은 문자만 변경될 수 있도록 볌위를 잘 고려
str4 = str3.replace("py","Py")
print(str4)
print()

#split("A") : 문자열을 기준 문자("A")로 나눈다.
str5 ="문자열 나누기(split)"
print(str5)
print(str5.split())#split()안에 아무 값도 넣지 않으면
                    # 기본이 공백,개행 등 나눈다.

print(str5.split("("))#나오면 결과는 리스트 자료형
print()

#index("A") : 문자열에서 "A"를 찾고 그 위치를 반환
str6 = "문자열 위치 찾기 (index)"
print("str6에서 '열'의 위치 : ",str6.index("열"))
print("str6에서 'index'의 위치 : ",str6.index("index"))
#print("str6에서 'ㅋ'의 위치 : ",str6.index("ㅋ"))

#찾지 못하면 오류

#find("A") : index와 동일한 함수(찾지 못하면 -1)
print("abcdefg".find("a"))
print("abcdefg".find("z"))#없어도 오류가 나지 않는다.

print("문자열문자열".index("문"))#처음 찾은 위치
print("문자열문자열".rindex("문"))#reverse : 뒤에서부터 찾음

#find,rfind가 있다.
print("문자열문자열".index("문",2))#2번 인덱스부터 찾기 시작


















































