'''
[반복문]
    조건에 만족하면 수행한다.
        >단, 조건에 만족하지 않을때까지

    1.while문
        -조건식이 참이면 수행
        -if문과 기본 구조가 동일
            >if문 : 조건이 참이면 수행 끝
            >while문 : 조건이 참이면 수행하고 다시 조건식을 비교

    [while문의 기본구조]
    while 조건식 :
        수행문
        수행문

    [for문의 기본구조]
    for 변수 in 리스트(또는 문자열,튜플 등등) :
        수행문
        수행문
        
        
'''
print("[while문]")

num = 0

while num < 3 :
    print("num : {}".format(num))
    num+=1#복합 대입 연산자 num = num + 1
    #1)num = 0,   0 < 3 만족하여 수행(출력문 및 num 1 증가)
    #2)num = 1,   1 < 3 만족하여 수행
    #3)num = 2,   2 < 3 만족하여 수행
    #4)num = 3,   3 < 3 만족하지 않아서 수행 끝

    #while문 수행 순서
    #조건 비교 ->(만족) 수행 -> 비교 ->....반복
    
print("끝")

'''
num = 0
while num < 3:
    print("num = ",num)
'''
'''
(1)무한반복
처음 반복문과는 다르게 num의 값을 수행문에서 증가시키지 않았다.
조건식에서 비교 대상인 num의 값이 계속 동일
그러므로 항상 조건이 만족하여 반복문 종료 X
Ctrl + c : 강제종료

(2)조건변수
조건식의 비교에 사용되는 변수는 '조건변수'
조건변수를 어떻게 다루었는지에 따라 반복 횟수가 정해진다.
조건변수는 조건식에서 그 값이 '사용'되기 때문에 미리 생성된 변수여야함


초기값(조건변수 생성)
while 조건식 : (조건변수 사용)
    수행문(반복해서 수행하고 싶은 코드 + 조건변수의 변화식)

조건변수의 변화식은 얼마든지 자유롭게 사용가능(사칙연산)
    단,조건식이 만족하지 않도록만 구성(만족하지 않아야 반복문종료)
    

'''

#반복 횟수 지정
'''
count = int(input("반복할 횟수 입력 :"))

while count > 0 :
    print("count = {}".format(count))
    count-=1
'''
'''
    1. 1부터 10까지 합 구하기
        > 1~10까지 증가할 변수
        > 합계를 누적할 변수

    [출력결과]
    1~10까지 합은 55입니다.
'''
'''
cnt = 1
hab = 0

while cnt < 11 :
    hab+=cnt
    cnt+=1

print("1~10까지의 합은 {}입니다.".format(hab))

'''
'''
    2. 1부터 입력 받은 수까지 합 구하기
    [출력결과]
    숫자 입력 : 5
    1~5까지 합은 15입니다.
'''
'''
num = int(input("숫자 입력 :"))
cnt = 1
hab = 0

while cnt <= num :
    hab+=cnt
    cnt+=1

print("1~{}까지의 합은 {}입니다.".format(num,hab))

'''
#특정 조건 만족
'''
input_num = 0# 초기값이 9면 while문 수행 X
while input_num != 9 :
    input_num = int(input("9를 입력하면 종료 : "))
'''

#break 사용(반복문 종료)
'''
while True :#항상만족 ->무한반복
    input_num = int(input("9를 입력하면 종료 : "))
    if input_num == 9:
        break#반복문 안에서만 사용가능. 반복문 종료
'''
#while문은 무한반복 조건을 걸어두고 break를 이용하여 반복문 종료
#조건문 따라 만들어서 탈출 시키겠다 -> 빠져나갈 구멍
#탈출조건이 복잡할 때 이렇게 사용하면 편함

#continue 사용(while 문의 조건식으로 점프)

num = 1
while num < 10 :#num의 값이 10보다 작으면 만족 -> 수행
    if num % 2 == 0 :#num 2로 나눈 나머지가 0가 같냐(짝수)
        #continue를 한다는 수행문 끝내는 것이다.
        #새롭게 끝나는 지점 생성
        num+=1#원래 수행문이 끝날 때 하던 코드 추가 작성
        continue#만나는 순간 조건식으로 점프
    

    print("num = {}".format(num))
    num+=1
print("이 때의 num? :",num)
    
#break,continue문은 '반복문' 안에서만 쓰인다
#단, if문이 필요하다
# 왜? if문 없는 break = 무조건 반복 종료 = 반복문 의미 없음
#     if문 없는 continue = 무조건 조건식 이동 =
#                          continue 아래 코드는 의미 없음



#구구단 5단

num = 1
while num < 10 :
    print("{} x {} = {}".format(5,num,5*num))
    num += 1


# 반복문

'''
     구구단 7단 출력하기
        [출력결과]
        7 * 1 = 7
        ...
        7 * 9 = 63
'''


'''
     입력 받은 단 출력하기
        [출력결과]
        단을 입력하세요 : 5
        5 * 1 = 5
        ...
        5 * 9 = 45
'''
'''
dan = int(input("단 입력 :"))
num = 1
while num < 10 :
    print("{} x {} = {}".format(dan,num,dan*num))
    num += 1
'''
'''
[문제] while 문을 이용해서 1부터 100까지의 홀수만 출력하기

[출력결과]
1
3
5
...
97
99

'''
num = 1

while num <= 100 :
    
    print("{}".format(num))
    num += 2

'''
[문제] 주인공 체력 계산
while문을 이용하여 숫자로 데미지를 입힌 후 체력이 0이 되면 종료하게 만들기

[출력결과]
주인공의 체력은 100 입니다.
얼마의 데미지를 입히겠습니까 : 50
주인공의 체력은 50 입니다.
얼마의 데미지를 입히겠습니까 : 40
주인공의 체력은 10 입니다.
얼마의 데미지를 입히겠습니까 : 10
주인공의 체력은 0이 되어 종료됩니다!

'''
'''
hp = 100

while hp > 0 :
    print("주인공의 체력은",hp,"입니다.")
    damage = int(input("얼마의 데미지를 입히겠습니까?"))
    hp -= damage

print("주인공의 체력은 0이 되어 종료")
'''
'''
[문제] while 문을 이용. 무한 루프를 사용해 입력한 두 숫자의 합계를 반복해서 계산하기

[출력결과]
더할 첫 번째 수를 입력하세요 : 55
더할 두 번째 수를 입력하세요 : 22
55 + 22 = 77
더할 첫 번째 수를 입력하세요 : 77
더할 두 번째 수를 입력하세요 : 120
77 + 120 = 197
더할 첫 번째 수를 입력하세요 : 

'''
'''
hap = 0

while True :
    a = int(input("더할 첫 번째 수를 입력하세요 :"))
    b = int(input("더할 두 번째 수를 입력하세요 :"))
    hap = a + b
    print("{} + {} = {}".format(a,b,(a+b)))

'''
'''
[문제] 위의 문제에서 참고. while문 이용.
위의 문제에서 덧셈 외에 뺄셈, 곱셈, 나눗셈, 나머지까지 계산해보자.
연산자가 아닌 문자를 입력하면 반복문을 종료하게 하자.

[출력결과]
계산할 첫 번째 수를 입력하세요 : 30
계산할 두 번째 수를 입력하세요 : 20
계산할 연산자를 입력하세요 : -
30 - 20 = 10
계산할 첫 번째 수를 입력하세요 : 30
계산할 두 번째 수를 입력하세요 : 20
계산할 연산자를 입력하세요 : *
30 * 20 = 600
계산할 첫 번째 수를 입력하세요 : 30
계산할 두 번째 수를 입력하세요 : 20
계산할 연산자를 입력하세요 : /
30 / 20 = 1.5
계산할 첫 번째 수를 입력하세요 : 30
계산할 두 번째 수를 입력하세요 : 20
계산할 연산자를 입력하세요 : %
30 % 20 = 10
계산할 첫 번째 수를 입력하세요 : 30
계산할 두 번째 수를 입력하세요 : 20
계산할 연산자를 입력하세요 : !
연산자를 잘못 입력하셨습니다.
계산을 종료합니다!

'''


'''

while True :
    a = int(input("첫 번째 수를 입력하세요 :"))
    b = int(input("두 번째 수를 입력하세요 :"))
    op = input("계산할 연산자를 입력 : ")

    if op == '+':
        print("{} + {} = {}".format(a,b,(a+b)))
    elif op == '-':
        print("{} - {} = {}".format(a,b,(a-b)))
    
    elif op == '*':
        print("{} * {} = {}".format(a,b,(a*b)))
        print(f'{a} * {b} ={a*b}')

    elif op == '/':
        print("{} / {} = {}".format(a,b,(a/b)))

    elif op == '%':
        print("{} % {} = {}".format(a,b,(a%b)))

    else:
        print("잘못된 연산자")
        print("계산 종료")
        break


'''



'''
    5. * 찍기
        - 입력된 숫자만큼 아래와 같은 모양으로 별 찍기
        - 조건변수를 증가시키며 문자열 연산을 하면 매우 편하게 출력할 수 있다.

    [출력결과]
    숫자 입력 : 5
    *
    **
    ***
    ****
    *****
'''
'''
num = int(input("숫자 입력 :"))
cnt = 0

while True:
    cnt += 1

    if cnt > num :
        break
    print("*"*cnt)
'''

'''
    6. 숫자 맞추기
        1~100까지 랜덤으로 정답 숫자를 생성
        while문 안에서 숫자를 입력 받고, 숫자가 정답이면 탈출!
    [출력결과] (정답이 70이라고 가정)
    숫자 입력 : 50
    더 큰 수를 입력해보세요.
    숫자 입력 : 80
    더 작은 수를 입력해보세요.
    숫자 입력 : 70
    정답입니다!
    3회만에 맞추셨습니다.   * 심화 : 몇 회 만에 맞췄는지 추가로 출력
'''
import random

print(random.random())#0.0 1.0 사이를 실수를 반환
print(random.random()+1.0)#1.0~2.0 사이를 실수를 반환
print(random.randint(1,10))#1~10 사이의 정수를 반환

answer = random.randint(1,100)
cnt = 0

'''

while True :

    num = int(input("정답 입력 : "))
    cnt += 1
    
    if num == answer :
        print("정답입니다!!")
        print("{}회만에 맞추셨습니다.".format(cnt))
        break
    elif num > answer :
        print("더 작은 수를 입력하세요~")
    elif num < answer :
        print("더 큰 수를 입력하세요~")
'''




print()
print("[for문]")
#in 의 사용
#if: 포함되어 있는지 확인하여 true/false
#for : 하나씩 대입한다.

#범위 지정 반복문
for z in [1,2,3]:#요소를 변수 '대입'하기 때문에 이 때 생성
    print("z =",z)#for문이 끝나도 z 변수는 사용 가능

print("끝 z =",z)

for z in "대한민국":
    print(z)

for a in [1,2,3,4,5] :
    print("하하하하하하")

print("a = ",a)

#for문 사용할 때 - 일반적인 사용법
#range() 함수 : 지정한 범위만큼의 숫자들을 반환
for i in range(10) : #0~9까지 순서대로 i
    print("range(10)에서의 i의 값 :",i)
'''
range(10) : 0~9
range(5)  : 0~4
    >값을 하나만 넣으면 시작(0) 끝의 값 -1(슬라이싱 느낌)

range(1,10) : 1~9(끝은 포함되지 않음)
range(10,45) : 10~44

range(1,10,2) : 1~9 값이 2씩 증가
range(10,1,-1):10~1까지 1씩 감소

reversed(range(10)) :0 ~9까지를 뒤집는다.
'''
#for 1~10까지의 합 구하기]
sum = 0#합계 누적용
for i in range(1,11) :
    sum += i
print("1~10의 합은 :",sum)

#입력횟수만큼 반복
'''
cnt = int(input("반복 횟수 입력 : "))

#for i in range(cnt,0,-1):
for i in reversed(range(1,cnt+1)):
    print(i)
'''


#for문 활용 예시
#손님 리스트 : 이름,나이

guest_list=[["홍길동",19],["이몽룡",27],["성춘향",18],["김철수",29]]
print(guest_list)

num = 0 #몇 번째 손님인지
for guest in guest_list :
    #print(guest)#리스트에서 요소 하나씩 대입(대입되는 요소는 '리스트')

    name = guest[0]#대입된 리스트인 guest의 첫 요소는 '문자열'이름
    age = guest[1]#두번째 요소는 '정수'나이

    num+=1

    print("{}번 손님 입장하실게요~".format(num))

    if age > 19 :
        print("{}님은 성인입니다. 입장하세요~".format(name))
    else:
        print("{}님은 미성년자 입니다. 입장하셔서 우유만 드세요".format(name))

    if age < 20:
        continue

    print("{}번째 손님인 {} 님은 성인입니다({}세).".format(num,name,age))





#for문을 활용 예시 (2)
#구구단 출력
#i,j 는 구구단에서 ~단을 의미하는 변수와 뒤에 곱해지는 숫자로 사용
for i in range(2,10):#단 : 2~9
    print("{}단".format(i))
    #i에 2가 대입된 상태로 i의 for문 이 수행
    #i의 for문의 수행문에 또 다른 j의 for문 수행
    #>>>j의 for문이 전체 수행되고 끝이 나야 i가 2일 때 수행 1회가 끝
    for j in range(1,10):
        print("{} x {} = {}".format(i,j,(i*j)))


'''
    1. 1부터 입력 받은 수까지 '짝수'의 합 구하기

        [출력결과]
        숫자 입력 : 5
        1~5까지 짝수의 합은 6입니다.
'''
'''
hab = 0
num = int(input("숫자 입력 :"))
for i in range(0,num+1,2):
    hab += i
print("1~{}까지 짝수의 합은 {} 입니다.".format(num,hab))
'''
'''
    2. 1부터 200까지 3과 4의 공배수를 하나의 변수에 '누적'
       누적된 수가 1000을 초과하면 반복문을 '탈출'
       이때, 누적된 수와 마지막에 더했던 공배수를 출력

        [출력결과]
        누적된 수 : 1092
        더한 수 : 156
'''
'''
hab = 0

for i in range(1,201,1):
    if i % 3 == 0 and i % 4 ==0 :
        hab += i
        if hab > 1000 :
            break
print("누적된 수 :",hab)
print("더한 수 :",i)

'''
'''
    3. 1~100 사이 정수 중, 3의 배수와 5의 배수를 '역순'으로 출력
       단, 3과 5의 공배수는 <15> 처럼 출력

       [출력결과]
       100 99 96 95 93 <90> 87 ... 5 3

'''
for i in reversed(range(1,101,1)):
    if i % 3 == 0 or i % 5 ==0 :
        if i % 3 == 0 and i % 5 == 0: 
            print("<{}>".format(i),end=" ")
        else:
            print("{}".format(i),end=" ")

'''
    난이도 <상>
    4. 2중for문 구구단 예제를 for문 1개만 사용해서 만들어보기
        - 총 반복 횟수 = 72회
        - 처음 단은 2
        - 곱해지는 숫자는 처음이 1
        - 9회 수행마다, 단이 1 증가, 곱해지는 숫자는 1로 변경
'''

for i in range(18,90,1):
    dan = i // 9
    gob = i % 9 + 1
    print("{} X {} = {}".format(dan,gob,(dan*gob)))
































